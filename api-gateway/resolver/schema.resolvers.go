package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	main "github.com/UchihaIthachi/go-grpc-graphql-multitenant-microservices/api-gateway"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, account main.AccountInput) (*main.Account, error) {
	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, product main.ProductInput) (*main.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, order main.OrderInput) (*main.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, pagination *main.PaginationInput, id *string) ([]*main.Account, error) {
	panic(fmt.Errorf("not implemented: Accounts - accounts"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, pagination *main.PaginationInput, query *string, id *string) ([]*main.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// Mutation returns main.MutationResolver implementation.
func (r *Resolver) Mutation() main.MutationResolver { return &mutationResolver{r} }

// Query returns main.QueryResolver implementation.
func (r *Resolver) Query() main.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
